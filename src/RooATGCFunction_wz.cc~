/***************************************************************************** 
 * Project: RooFit                                                           * 
 *                                                                           * 
 * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/ 

// Your description goes here... 

#include "Riostream.h" 

#include "HiggsAnalysis/CombinedLimit/interface/RooATGCFunction_wz.h" 

#include <math.h> 
#include "TMath.h" 

#include "TFile.h"


ClassImpUnique(RooATGCFunction_wz,MAGICWORDOFSOMESORT_wz) 

RooATGCFunction_wz::RooATGCFunction_wz() : 
  P_dk(0), P_dg1(0)
{
  initializeProfiles();
}

RooATGCFunction_wz::RooATGCFunction_wz(const char *name, const char *title, 
                                 RooAbsReal& _x,
                                 RooAbsReal& _lZ,
                                 RooAbsReal& _dkg,
                                 RooAbsReal& _dg1,
                                 const char * parFilename) :
   RooAbsReal(name,title), 
   x("x","x",this,_x),
   lZ("lZ","lZ",this,_lZ),
   dkg("dkg","dkg",this,_dkg),
   dg1("dg1","dg1",this,_dg1),
   profileFilename(parFilename),
   P_dk(0), P_dg1(0)
{ 
  initializeProfiles();
  const char* pwd = gDirectory->GetPath();
  TFile *f = TFile::Open(parFilename,"READ");  
  gDirectory->cd(pwd);
  std::cout << "@@@@@@@@ opened the input file!" << std::endl;
  readProfiles(*f);
  std::cout << "read profiles!" << std::endl;
  f->Close();
} 

RooATGCFunction_wz::RooATGCFunction_wz(const RooATGCFunction_wz& other, 
                                 const char* name) :  
  RooAbsReal(other,name), 
  x("x",this,other.x),
  lZ("lZ",this,other.lZ),
  dkg("dkg",this,other.dkg),
  dg1("dg1",this,other.dg1),
  profileFilename(other.profileFilename),
  P_dk(0), P_dg1(0)
{ 
  initializeProfiles();

  initializeProfiles();
  const char* pwd = gDirectory->GetPath();
  TFile *f = TFile::Open(profileFilename,"READ");  
  gDirectory->cd(pwd);  
  readProfiles(*f);
  f->Close();
} 

void RooATGCFunction_wz::initializeProfiles() {
  int const N_bins=15;
  P_dk = new TH2D*[N_bins]();
  P_dg1 = new TH2D*[N_bins]();
}

void RooATGCFunction_wz::readProfiles(TDirectory& dir) const {
int const N_bins=15;
int const bins_first=200.;
int const bins_last=800.;
double bin_width=(bins_last-bins_first)/N_bins;

  int i;
  for(i=0; i<N_bins; ++i) {
    
    int bin_low=bins_first+(i*bin_width);
    int bin_high=bins_first+(i+1)*bin_width;
    if (P_dk[i]) delete P_dk[i];
    //    TString dkname = TString::Format("p%i_lambda_dkg", i);
    TString dkname = TString::Format("bin_content_lam_dk_%i_%ito%iGeV",i+1,bin_low,bin_high);
    cout <<"trying to get: "<<dkname << endl;
    P_dk[i] = dynamic_cast<TH2D *>(dir.Get(dkname)->Clone(dkname+"new"));
    P_dk[i]->SetDirectory(0);
    if (P_dg1[i]) delete P_dg1[i];
    //    TString dg1name = TString::Format("p%i_lambda_dg1", i);
    TString dg1name = TString::Format("bin_content_lam_dg_%i_%ito%iGeV",i+1,bin_low,bin_high);
    P_dg1[i] = dynamic_cast<TH2D *>(dir.Get(dg1name)->Clone(dg1name+"new"));
    P_dg1[i]->SetDirectory(0);
  }

  // for (i=0; i<=6; i++) {
  //   std::cout << 'P' << i << "_dk " << P_dk[i]->GetName() << '\n';
  // }
}

void RooATGCFunction_wz::readProfiles(RooATGCFunction_wz const& other) {
int const N_bins=15;
int const bins_first=200.;
int const bins_last=800.;
double bin_width=(bins_last-bins_first)/N_bins;

  for (int i = 0; i<N_bins; ++i) {
    int bin_low=bins_first+(i*bin_width);
    int bin_high=bins_first+(i+1)*bin_width;
    std::cout << other.P_dk[i] << std::endl;
    std::cout << other.P_dg1[i] << std::endl;
    //    TString dkname = TString::Format("p%i_lambda_dkg", i);
    TString dkname = TString::Format("bin_content_lam_dk_%i_%ito%iGeV",i+1,bin_low,bin_high);
    cout <<"trying to get object: "<<dkname << endl;
    //    dir.ls();
    P_dk[i] = dynamic_cast<TH2D *>(other.P_dk[i]->Clone(dkname+"new"));
    P_dk[i]->SetDirectory(0);
    //    TString dg1name = TString::Format("p%i_lambda_dg1", i);
    TString dg1name = TString::Format("bin_content_lam_dg_%i_%ito%iGeV",i+1,bin_low,bin_high);
    P_dg1[i] = dynamic_cast<TH2D *>(other.P_dg1[i]->Clone(dg1name+"new"));
    P_dg1[i]->SetDirectory(0);
  }
}

RooATGCFunction_wz::~RooATGCFunction_wz() {
  int const N_bins=15;
  for(int i = 0; i<N_bins; ++i) {
    if (P_dk[i])
      delete P_dk[i];
    if (P_dg1[i])
      delete P_dg1[i];
  }
  delete[] P_dk;
  delete[] P_dg1;
}

Double_t RooATGCFunction_wz::evaluate() const 
{ 
  // ENTER EXPRESSION IN TERMS OF VARIABLE ARGUMENTS HERE 

  TH2D ** P = P_dg1;
  double v1(lZ), v2(dg1);
  if(TMath::Abs(dg1)<0.000001) {
    P = P_dk;
    v2 = dkg;
  }

  if (not P[0]) {
    TFile f(profileFilename);
    readProfiles(f);
    f.Close();
  }

  if (v1 < P[0]->GetXaxis()->GetXmin())
    v1 = P[0]->GetXaxis()->GetXmin();
  if (v1 > P[0]->GetXaxis()->GetXmax())
    v1 = P[0]->GetXaxis()->GetXmax();
  if (v2 < P[0]->GetYaxis()->GetXmin())
    v2 = P[0]->GetYaxis()->GetXmin();
  if (v2 > P[0]->GetYaxis()->GetXmax())
    v2 = P[0]->GetYaxis()->GetXmax();
 
  double ret(0.);
  int const N_bins=15;
  int const bins_first=200.;
  int const bins_last=800.;
  double bin_width=(bins_last-bins_first)/N_bins;
  /*
  for(int i = 0; i<N_bins; i++) {
    // std::cout << P_dk[i]->GetName() << '\n';
    ret += P[i]->Interpolate(v1, v2)*TMath::Power(x, i);
  }
  */
  int bin_with_x=int((x-bins_first)/bin_width)+1;
  ret = P[bin_with_x-1]->Interpolate(v1, v2);

  if (ret < 0.) ret = 0.;
  return ret; 
}
